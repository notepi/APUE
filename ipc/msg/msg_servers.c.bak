/*************************************************
*
*readme
*创建有名内存用于进程间通信
*功能：服务器在消息队列中写入数据，客户端读取等待
*NOTES:代码并不健壮，消息队列可以被马上取消
*
**************************************************/

#include <stdio.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>

#define MESSAGE_BUFF	128 
struct msgbuf {
   long mtype;       												/* message type, must be > 0 */
   char mtext[MESSAGE_BUFF];										/* message data */
};

int main()
{
	struct msgbuf msgsz;
	void *retptr;
	int ret;
	int msqid;
	pid_t pid;
	key_t key;
	
	key = ftok("./a.c", 'a');
	if(key < 0){
		printf("failed to call ftok!\n");
		printf("errno value: %d, it means: %s\n",
				errno, strerror(errno));
	}
		
	msqid = msgget(key, IPC_CREAT | 0777);							// 创建消息队列(创建文件)
	if( msqid < 0){
		printf("failed to call msgget!\n");
		printf("errno value: %d, it means: %s\n",
				errno, strerror(errno));
		return -1;
	}	

	printf("msqid is:%d\n", msqid);
	msgsz.mtype = 100;											// 消息类型
	while(1)
	{
		printf("please input message!\n");
		fflush(stdin);
		fgets(msgsz.mtext, MESSAGE_BUFF, stdin);				// 写入消息
		ret = msgsnd(msqid, (void *)&msgsz, 
						MESSAGE_BUFF, 0);						// 阻塞模式发送消息(写入文件)
		if( ret < 0){
			printf("failed to call msgsnd!\n");
			printf("errno value: %d, it means: %s\n",
					errno, strerror(errno));
			return -1;
		}
	}

	ret = msgctl(msqid, IPC_RMID, NULL);						// 取消消息队列(删除文件)
	if(ret < 0){
		printf("failed to call shmctl!\n");
		printf("errno value: %d, it means: %s\n",
				errno, strerror(errno));
		return -1;
	}
}




























