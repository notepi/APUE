/*************************************************
*
*readme
*创建无名消息灯用于进程间通信
*功能：父进在消息队列中进行P操作，子进程进行V操作
*NOTES:代码并不健壮,有些系统在默认初始化信号量为0，但是并不是所有的都是0
*所以在父子进程之间，推荐使用posix的sem
*
**************************************************/
#include <stdio.h>
#include <sys/ipc.h>
#include <errno.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/sem.h>
union semun {
   int              val;    // Value for SETVAL 
   struct semid_ds *buf;    // Buffer for IPC_STAT, IPC_SET 
   unsigned short  *array;  // Array for GETALL, SETALL 
   struct seminfo  *__buf;  // Buffer for IPC_INFO
							// (Linux-specific) 
};


int main()
{
	int semid;
	char *ptr;
	void *pret;
	pid_t pid;
	int ret, i;
	union semun semdate;
	struct  sembuf sops;
	
    semid = semget(IPC_PRIVATE, 1, 0777);				// 创建无名信号灯，内含1个信号量
	if( semid < 0){
		printf("failed to call shmget!\n");
		printf("errno value: %d, it means: %s\n",
				errno, strerror(errno));
		return -1;
	}
	printf("semid is:%d\n", semid);

	pid = fork();										// 创建进程
	if(0 == pid){// 子进程
		int j;
		ret = semctl(semid, 0, GETVAL);					// 读取信号量值
		printf("semval is:%d\n", ret);					// 打印信号量值
		
		sops.sem_num = 0;								// 第一个信号量
		sops.sem_op = -1;								// 释放信号量
		sops.sem_flg = 0;								// 阻塞等待
		ret = semop(semid, &sops, 1);					// v操作
		if(ret < 0){
			printf("failed to call semctl!\n");
			printf("errno value: %d, it means: %s\n",
					errno, strerror(errno));
			return -1;
		}
		
		for(j = 0; j <= 10; j++){
			printf("j value is:%d\n", j);
		}
		return 1;
	}
	else if(pid > 0){// 父进程
		sleep(10);										// 等待子进程先运行
		semdate.val = 0;							
		ret = semctl(semid, 0, SETVAL, semdate);		// 初始化信号量
		if(ret < 0){
			printf("failed to call semctl!\n");
			printf("errno value: %d, it means: %s\n",
					errno, strerror(errno));
			return -1;
		}
		
		for(i = 0; i <= 10; i++){
			printf("i value is:%d\n", i);
		}
		
		sops.sem_num = 0;								// 第一个信号量
		sops.sem_op = 1;								// 释放信号量
		sops.sem_flg = 0;								// 阻塞等待
		semop(semid, &sops, 1);							// p操作
		
		ret = semctl(semid, 0, GETVAL);					// 读取信号量值
		printf("semval is:%d\n", ret);					// 打印信号量值
	}
	else{// 创建失败
		printf("errno value: %d, it means:%d\n",
				errno, strerror(errno));
	}

	system("ipcs -s");
	while(1);
	semctl(semid, 0, IPC_RMID);							// 取消信号灯
	
	return 1;
}