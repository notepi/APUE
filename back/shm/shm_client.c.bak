/*************************************************
*
*readme
*创建有名内存用于进程间通信
*功能：服务器在内存中写入数据，完成后通知客户端
*子进程收到信号后读取数据，读取完成后通知父进程
*NOTES:代码并不健壮，并未解决进程中断后内存释放
*
**************************************************/#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>
#include <unistd.h>
#include <signal.h>
struct buf{
	pid_t pid;
	char buff[124];
};
void ChildFun(int sig)
{
	printf("child capture signal:%d\n", sig);
}

int main()
{
	int shmid;
	struct buf *ptr;
	char *pret;
	pid_t pid;
	int ret;
	key_t key;
	
	signal(SIGUSR1, ChildFun);						// 注册捕捉信号

	key = ftok("./a.c", 'a');						// 生成key
	if(key < 0){
		printf("failed to call ftok!\n");
		printf("errno value: %d, it means: %s\n",
				errno, strerror(errno));
		return -1;
	}
	
    shmid = shmget(key, 128, IPC_CREAT | 0777);		// 创建共享内存
	if( shmid < 0){
		printf("failed to call shmget!\n");
		printf("errno value: %d, it means: %s\n",
				errno, strerror(errno));
		return -1;
	}
	
	ptr = (struct buf *)shmat(shmid, NULL, 0);		// 内存映射，默认读写权限
	if(NULL == ptr){
		printf("failed to call shmat!\n");
		printf("errno value: %d, it means: %s\n",
			errno, strerror(errno));
		return -1;
	}
	
	pid = ptr->pid;									// 从共享内存读取服务器id
	ptr->pid = getpid();							// 在共享内存中写入自己id
	
	printf("pid is:%d\n", getpid());				// 读取自身id	
	kill(pid, SIGUSR2);								// 通知服务器已经读取服务器id
				
	pause();										// 等待服务器读取pid
	printf("read!\n");
	// 向共享内存写入数据
	while(1)
	{
		printf("read buff is:%s", ptr->buff);		// 打印读取数据
		kill(pid, SIGUSR2);							// 通知子进程数据可读
		pause();									// 等待子进程读取完成

	}
	
	printf("shmid is:%d\n", shmid);
	system("ipcs -m");
	
	shmdt(ptr);										// 解除内存绑定，在进程后释放
	ret = shmctl(shmid, IPC_RMID, NULL);			// 释放内核内存
	if(ret < 0){
		printf("failed to call shmctl!\n");
		printf("errno value: %d, it means: %s\n",
				errno, strerror(errno));
		return -1;
	}
	
	system("ipcs -m");
	return 1;
}