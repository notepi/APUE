/*************************************************
*
*readme
*创建无名内存用于进程间通信
*功能：父进在内存中写入数据，完成后通知子进程
*子进程收到信号后读取数据，读取完成后通知父进程
*NOTES:代码并不健壮
*
**************************************************/
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>
#include <unistd.h>
#include <signal.h>
void ChildFun(int sig)
{
	printf("child capture signal:%d\n", sig);
}
void ParentFun(int sig)
{
	printf("child capture signal:%d\n", sig);
}
int main()
{
	int shmid;
	char *ptr;
	char *pret;
	pid_t pid;
	int ret;
    shmid = shmget(IPC_PRIVATE, 128, 0777);			// 创建无名共享内存
	if( shmid < 0){
		printf("failed to call shmget!\n");
		printf("errno value: %d, it means: %s\n",
				errno, strerror(errno));
		return -1;
	}
	
	ptr = (char *)shmat(shmid, NULL, 0);			// 内存映射，默认读写权限
	if(NULL == ptr){
		printf("failed to call shmat!\n");
		printf("errno value: %d, it means: %s\n",
			errno, strerror(errno));
		return -1;
	}
	pid = fork();									// 创建进程	
	if(0 == pid){									// 子进程
		signal(SIGUSR1, ChildFun);					// 注册捕捉信号
		printf("i'm child");
		pause();									// 等待信号
		printf("gets:%s\n", ptr);
		pid = getppid();							// 获取父进程id
		kill(pid, SIGUSR2);							// 通知父进程读取结束
		return 1;
	}
	else if(pid > 0){								// 父进程
		signal(SIGUSR2, ParentFun);					// 注册捕捉信号
		printf("child id is:%d,\n", pid);
		pret = fgets(ptr, 128, stdin);
		if(NULL == pret){
			printf("failed to call fgets!\n");
			printf("errno value: %d, it means: %s\n",
					errno, strerror(errno));
		return -1;
		}
		printf("write!\n");
		kill(pid, SIGUSR1);							// 通知子进程数据可读
		pause();									// 等待子进程读取完成
	}
	else{											// 创建失败
		printf("errno value: %d, it means:%d\n",
				errno, strerror(errno));
	}

	printf("shmid is:%d\n", shmid);
	system("ipcs -m");
	
	shmdt(ptr);										// 解除内存绑定，在进程后释放
	ret = shmctl(shmid, IPC_RMID, NULL);			// 释放内核内存
	if(ret < 0){
		printf("failed to call shmctl!\n");
		printf("errno value: %d, it means: %s\n",
				errno, strerror(errno));
		return -1;
	}
	
	system("ipcs -m");
	wait(NULL);										// 等待子进程结束
	return 1;
	

}